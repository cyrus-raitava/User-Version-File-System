Command	: echo "one1" > mount/one.txt
Output	:

** create: /one.txt **
** flush /one.txt **
** write: /one.txt **
** flush /one.txt **
** release /one.txt **

Command	: cp mount/one.txt mount/two.txt
Output	:

** open: /one.txt **
** create: /two.txt **
** read: /one.txt **
** write: /two.txt **
** flush /two.txt **
** release /two.txt **
** flush /one.txt **
** release /one.txt **

Command	: cat mount/two.txt
Output	:

** open: /two.txt **
** read: /two.txt **
** flush /two.txt **
** release /two.txt **

Command	: cat mount/one.txt mount/two.txt > mount/three.txt
Output	:

** create: /three.txt **
** flush /three.txt **
** open: /one.txt **
** read: /one.txt **
** write: /three.txt **
** flush /one.txt **
** release /one.txt **
** open: /two.txt **
** read: /two.txt **
** write: /three.txt **
** flush /two.txt **
** release /two.txt **
** flush /three.txt **
** release /three.txt **

Command	: nano mount/three.txt
Output	:

** create: /.three.txt.swp **
** write: /.three.txt.swp **
** flush /.three.txt.swp **
** release /.three.txt.swp **
** open: /three.txt **
** read: /three.txt **
** flush /three.txt **
** release /three.txt **
** open: /three.txt **
** flush /three.txt **
** release /three.txt **

Addition/Deletion of text produced:
Output	:

** create: /.three.txt.swp **
** write: /.three.txt.swp **
** flush /.three.txt.swp **
** release /.three.txt.swp **

Saving of file:

** open: /three.txt **
** truncate: /three.txt **
** write: /three.txt **
** flush /three.txt **

====================================================================================================

ANSWER TO THE LAST ASSIGNMENT QUESTION:

There are several pros and cons to cascading the deletion of a file to its subsequent past versions, in the personally implemented version file system I have designed for this assignment.

Pros:

1. Should the user truly want a file to be completely deleted (e.g for privacy reasons, or simply for the sake of not leaving any traces of the contents of the file), cascading deletion is desirable.

2. In terms of scalability, memory-wise a system which deletes corresponding past versions may be more effective, and be able to hold more files/file versions (as opposed to a system which keeps all past versions of deleted files).

Cons:

1. Should the user accidentally delete a file, he/she may restore and recover the contents of said file, via the mkcurrent() (or any equivalent implementation) method. If the data in this file is very precious or important, an automated permanent deletion of all past versions may not be desirable.


These are all very valid pros and cons, and should be taken into account properly, when deciding whether or not to include such a feature in a versioning file system implementation. For the purposes of this assignment, I chose to not implement anything for cascading deletion, meaning the deletion of a file does NOT delete its past versions.


